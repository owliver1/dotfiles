;;; eclim-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from eclim.el

(autoload 'eclim/workspace-dir "eclim" "\
Return the path of the current eclim workspace directory.")
(autoload 'eclim-mode "eclim" "\
An interface to the Eclipse IDE.

This is a minor mode.  If called interactively, toggle the `Eclim
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `eclim-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-eclim-mode 'globalized-minor-mode t)
(defvar global-eclim-mode nil "\
Non-nil if Global Eclim mode is enabled.
See the `global-eclim-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-eclim-mode'.")
(custom-autoload 'global-eclim-mode "eclim" nil)
(autoload 'global-eclim-mode "eclim" "\
Toggle Eclim mode in all buffers.
With prefix ARG, enable Global Eclim mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Eclim mode is enabled in all buffers where
`eclim--enable-for-accepted-files-in-project' would do it.

See `eclim-mode' for more information on Eclim mode.

(fn &optional ARG)" t)
(register-definition-prefixes "eclim" '("eclim"))


;;; Generated autoloads from eclim-ant.el

(register-definition-prefixes "eclim-ant" '("eclim"))


;;; Generated autoloads from eclim-common.el

(defvar eclim-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "M-TAB") 'eclim-complete) map) "\
The keymap used in command `eclim-mode'.")
(register-definition-prefixes "eclim-common" '("eclim"))


;;; Generated autoloads from eclim-completion.el

(register-definition-prefixes "eclim-completion" '("eclim-"))


;;; Generated autoloads from eclim-debug.el

(register-definition-prefixes "eclim-debug" '("eclim-"))


;;; Generated autoloads from eclim-java.el

(register-definition-prefixes "eclim-java" '("eclim"))


;;; Generated autoloads from eclim-java-run.el

(register-definition-prefixes "eclim-java-run" '("eclim-"))


;;; Generated autoloads from eclim-macros.el

(register-definition-prefixes "eclim-macros" '("eclim"))


;;; Generated autoloads from eclim-maven.el

(register-definition-prefixes "eclim-maven" '("eclim-"))


;;; Generated autoloads from eclim-problems.el

(register-definition-prefixes "eclim-problems" '("eclim-"))


;;; Generated autoloads from eclim-project.el

(autoload 'eclim-project-mode "eclim-project" "\
Manage all your eclim projects in one buffer.

\\{eclim-project-mode-map}" t)
(register-definition-prefixes "eclim-project" '("eclim"))


;;; Generated autoloads from eclim-scala.el

(register-definition-prefixes "eclim-scala" '("eclim-scala-find-declaration"))


;;; Generated autoloads from eclimd.el

(defalias 'start-eclimd 'eclimd-start)
(autoload 'eclimd-start "eclimd" "\
Start the eclimd server and optionally wait for it to be ready.

WORKSPACE-DIR is the desired workspace directory for which
eclimd will be started.  `eclimd-default-workspace' is used
as the default value of this directory.

If CALLBACK is non-nil, it is called with no arguments once
the server is ready.

After having started the server process, this function may
block until eclimd is ready to receive commands, depending
on the value of `eclimd-wait-for-process'.  Commands will
fail if they are executed before the server is ready.

To stop the server, you should use `eclimd-start'.

(fn WORKSPACE-DIR &optional CALLBACK)" t)
(register-definition-prefixes "eclimd" '("eclimd-"))

;;; End of scraped data

(provide 'eclim-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; eclim-autoloads.el ends here
